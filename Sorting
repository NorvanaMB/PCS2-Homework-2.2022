#Algorithms 
Hackerranck : @mohamed_1906874

1)Closest Numbers

import math
import os
import random
import re
import sys

#
# Complete the 'closestNumbers' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts INTEGER_ARRAY arr as parameter.
#

def closestNumbers(arr):
    pairs = []
    mindiff = 999999999999
    arr.sort()
    
    for i in range(1, len(arr)):
        d = abs(arr[i-1] - arr[i])
        if d < mindiff:
            mindiff = d
            pairs = [arr[i-1], arr[i]]
        
        elif d == mindiff:
            pairs.extend([arr[i-1], arr[i]])
            
    return pairs 

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    
 2)Counting Sort 1

   import math
import os
import random
import re
import sys

#
# Complete the 'countingSort' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts INTEGER_ARRAY arr as parameter.
#

def countingSort(arr):
  count = [0] * 100
  for num in arr:
    count[num] += 1
  return count

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    result = countingSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()
    
  3) Counting Sort 2
  
  import math
import os
import random
import re
import sys

#
# Complete the 'countingSort' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts INTEGER_ARRAY arr as parameter.
#

def countingSort(arr):
    count = [0] * (max(arr)+1)
    for num in arr:
        count[num] += 1
    sortarr = []
    for i in range(len(count)):
        while count[i] != 0:
            count[i] -= 1
            sortarr.append(i)
            
    return sortarr 

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    result = countingSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()

4)The Full Counting Sort
import math
import os
import random
import re
import sys

#
# Complete the 'countSort' function below.
#
# The function accepts 2D_STRING_ARRAY arr as parameter.
#

def countSort(arr):
    result = [[] for i in range(100)]
    
 # the first half of the iteration
    for i in range (n//2):
        result[int(arr[i][0])].append('-')
        
 # second half of the itaration 
    for i in range (n//2, n):
        result[int(arr[i][0])].append(arr[i][1])
        
    for string in result:
        if string:
            print(*string, end=' ')

if __name__ == '__main__':
    n = int(input().strip())

    arr = []

    for _ in range(n):
        arr.append(input().rstrip().split())

    countSort(arr)
    
 5)Insertion Sort-Part1 
 import math
import os
import random
import re
import sys

#
# Complete the 'insertionSort1' function below.
#
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER_ARRAY arr
#

def insertionSort1(n, arr):
    key = arr[-1]
    i = n-1
    while i > 0 and arr[i-1] > key :
        arr[i] = arr[i-1] 
        print(*arr)
        i -= 1
    arr[i] = key
    print (*arr)

if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    insertionSort1(n, arr)

6) Insertion Sort-Part 2
import math
import os
import random
import re
import sys

#
# Complete the 'insertionSort2' function below.
#
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER_ARRAY arr
#

def insertionSort2(n, arr):
    for j in range(1, n):
        key = arr[j]
        i = j 
        while i > 0 and arr[i-1] > key:
            arr[i] = arr[i-1]
            i -= 1
        arr[i] = key 
        print(*arr)
if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    insertionSort2(n, arr)


7)Correctness and the Loop Invariant
def insertion_sort(l):
    for i in range(1, len(l)):
        j = i-1
        key = l[i]
        while (j >= 0) and (l[j] > key):
           l[j+1] = l[j]
           j -= 1
        l[j+1] = key

m = int(input().strip())
ar = [int(i) for i in input().strip().split()]
insertion_sort(ar)
print(" ".join(map(str,ar)))

8)Running Time of Algorithms
import math
import os
import random
import re
import sys

#
# Complete the 'runningTime' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER_ARRAY arr as parameter.
#

def runningTime(arr):
     shifts = 0

     for j in range(1, len(arr)):
        key = arr[j]
        i = j 
        while i > 0 and arr[i -1] > key:
            arr[i] = arr[i-1]
            shifts += 1
            i -= 1
        arr[i] = key
     return shifts

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    result = runningTime(arr)

    fptr.write(str(result) + '\n')

    fptr.close()
    
9)Quicksort 1-Partition

import math
import os
import random
import re
import sys

#
# Complete the 'quickSort' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts INTEGER_ARRAY arr as parameter.
#

def quickSort(arr):
    left = []
    right = []
    pivot = arr[0]
    
    i = 0
    j = len(arr) - 1
    while i < j:
        #for the index i
        while i < j and arr[i] <= pivot:
            i += 1
        # the index j 
        while arr[j] > pivot:
            j -= 1
            
        if i < j:
            arr[i], arr[j] = arr[j], arr[i]
            i += 1
            j -= 1
    arr[0], arr[j] = arr[j], arr[0]
    
    return arr

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    result = quickSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()
    
10)Lily's homewrok




  

